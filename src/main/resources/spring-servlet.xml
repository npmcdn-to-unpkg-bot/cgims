<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<!-- 会自动注册了validator ConversionService -->
	<mvc:annotation-driven validator="validator"
		conversion-service="conversion-service" />

	<!-- 国际化的消息资源文件 -->
<!-- 	<bean id="messageSource" -->
<!-- 		class="org.springframework.context.support.ReloadableResourceBundleMessageSource"> -->
<!-- 		<property name="basenames"> -->
<!-- 			<list> -->
<!-- 				在web环境中一定要定位到classpath 否则默认到当前web应用下找 -->
<!-- 				<value>classpath:messages</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 		<property name="defaultEncoding" value="UTF-8" /> -->
<!-- 		<property name="cacheSeconds" value="60" /> -->
<!-- 	</bean> -->
	
	<!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
<!-- 		<property name="validationMessageSource" ref="messageSource" /> -->
	</bean>
	<bean id="conversion-service"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />


	<!-- 开启controller注解支持 -->
	<!-- 注：如果base-package=com.riyue.datacenter 则注解事务不起作用 TODO 读源码 -->
	<context:component-scan base-package="com.mimi.cgims.web.controller">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>


	<!-- <mvc:interceptors> -->
	<!-- <bean class="cn.mycompany.com.test.interceptor.TestInterceptor"/> -->
	<!-- <mvc:interceptor> -->
	<!-- <mvc:mapping path="/edit.kz"/> -->
	<!-- <bean class="cn.mycompany.com.test.interceptor.TestInterceptor"/> -->
	<!-- </mvc:interceptor> -->
	<!-- </mvc:interceptors> -->

	<mvc:view-controller path="/" view-name="forward:/index" />
	<!-- 当在web.xml 中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
	<mvc:default-servlet-handler />
	<!-- 静态资源映射 -->
	<!-- <mvc:resources mapping="/img/**" location="/WEB-INF/img/" /> -->
	<!-- <mvc:resources mapping="/css/**" location="/WEB-INF/css/" /> -->
	<!-- <mvc:resources mapping="/js/**" location="/WEB-INF/js/" /> -->

	<!-- ========================= VIEW定义 ========================= -->
	<!-- bean name view resolver -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"
		p:order="0" />

	<!-- 根据客户端的不同的请求决定不同的 view进行响应, 如 /blog/1.json /blog/1.xml -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"
		p:order="1">
		<!-- 设置为true以忽略对Accept Header的支持 -->
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
<!-- 		<property name="favorPathExtension" value="false" /> -->

		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
<!-- 		<property name="favorParameter" value="false" /> -->

<!--favorPathExtension, favorParameter是true时才起作用 -->
<!-- 		<property name="mediaTypes">   -->
<!-- 			<map> -->
<!-- 				<entry key="wml" value="text/vnd.wap.wml"/> -->
<!-- 				<entry key="vnd" value="application/vnd.wap.xhtml+xml"/> -->
<!-- 				<entry key="xhtml" value="application/xhtml+xml"/> -->
<!-- 				<entry key="html" value="*" /> -->
<!-- 			</map> -->
<!-- 		</property> -->
		<property name="viewResolvers">
			<list>
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass"
						value="org.springframework.web.servlet.view.JstlView" />
					<property name="contentType" value="text/html" />
					<property name="prefix" value="/WEB-INF/jsp/" />
					<property name="suffix" value=".jsp" />
				</bean>
			</list>
		</property>
		<!-- 可配置Not Found url <property name="defaultViews"> <list> <bean class="org.springframework.web.servlet.view.JstlView" 
			p:url="/notfound"/> </list> </property> -->
	</bean>


	<!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
	<bean id="defaultViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:order="3">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- json view -->
	<!-- <bean id="defaultJsonView" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"/> -->
	<!--<bean-->
		<!--class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">-->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
		<!--<property name="synchronizeOnSession" value="true"/>-->
		<!--<property name="customArgumentResolvers">-->
			<!--<list>-->
				<!--<bean class="cn.javass.spring.mvc.method.annotation.RequestJsonParamMethodArgumentResolver"/>-->
				<!--<bean class="cn.javass.spring.mvc.method.annotation.FormModelMethodArgumentResolver"/>-->
			<!--</list>-->
		<!--</property>-->
	</bean>
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json</value>
				<value>application/json;charset=UTF-8</value>
				<value>application/x-www-form-urlencoded</value>
				<value>application/x-www-form-urlencoded; charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 文件上传相关 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--one of the properties available;the maximum file size in bytes -->
		<!-- <property name="maxUploadSize" value="10000000"/> -->
	</bean>

	<!-- 控制器异常处理 -->
	<bean id="exceptionResolver"
		class="com.mimi.cgims.web.JsonExceptionHandler">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">
					error_all
				</prop>
			</props>
		</property>
	</bean>

<!-- 	<bean id="timeBasedAccessInterceptor" class="com.mimi.cgims.filter.TimeBasedAccessInterceptor">   -->
<!-- 	    <property name="openingTime" value="9" />   -->
<!-- 	    <property name="closingTime" value="12" />   -->
<!-- 	    <property name="mappingURL" value=".*/user\.do\?action=reg.*" />   -->
<!-- 	</bean>   -->
<!-- 	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">   -->
<!-- 	    <property name="interceptors">   -->
<!-- 	        <list>   -->
<!-- 	            <ref bean="timeBasedAccessInterceptor"/>   -->
<!-- 	        </list>   -->
<!-- 	    </property>   -->
<!-- 	</bean>   -->
	
	<mvc:interceptors>
		<mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.mimi.cgims.filter.LoginInterceptor">
             	<!--<property name="geetest" ref="geetestLibBean" /> -->
            </bean>
		</mvc:interceptor>
	</mvc:interceptors>

</beans>
